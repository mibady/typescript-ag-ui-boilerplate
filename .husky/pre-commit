#!/bin/sh

echo "üîç Pre-commit hook: Quality gates"
echo "============================================================"

# Run secret detection
"$(dirname "$0")/pre-commit-secrets" || exit 1

# Check staged file count (prevent massive commits)
STAGED_COUNT=$(git diff --cached --name-only | wc -l)
MAX_FILES=15

if [ $STAGED_COUNT -gt $MAX_FILES ]; then
  echo ""
  echo "‚ùå COMMIT TOO LARGE"
  echo "============================================================"
  echo "Files staged: $STAGED_COUNT (maximum: $MAX_FILES)"
  echo ""
  echo "Large commits are hard to review and increase merge conflicts."
  echo ""
  echo "Split into smaller, atomic commits:"
  echo "  1. Review staged files: git diff --cached --name-only"
  echo "  2. Unstage some files: git reset HEAD <file>"
  echo "  3. Commit in logical groups (5-10 files recommended)"
  echo ""
  echo "For CLI tool development:"
  echo "  - Tiny: 1-3 files (type updates, bug fixes)"
  echo "  - Small: 4-7 files (feature component)"
  echo "  - Medium: 8-12 files (template category)"
  echo "  - Large: 13-15 files (major feature - rare)"
  echo ""
  echo "Or bypass (NOT RECOMMENDED): git commit --no-verify"
  echo "============================================================"
  exit 1
fi

echo "‚úÖ Commit size: $STAGED_COUNT files (within $MAX_FILES limit)"

# Check for misplaced markdown files (relaxed for user projects)
echo ""
echo "üìÑ Checking markdown file locations..."
# Allow PHASE-*.md files in root for this boilerplate project
MISPLACED_MD=$(git diff --cached --name-only | grep '\.md$' | grep -v '^docs/' | grep -v '^README\.md$' | grep -v '^LICENSE\.md$' | grep -v '^PHASE-.*\.md$' || true)

if [ ! -z "$MISPLACED_MD" ]; then
  echo ""
  echo "‚ö†Ô∏è  Unusual markdown file location detected:"
  echo "$MISPLACED_MD"
  echo ""
  echo "Consider organizing documentation in docs/ subdirectories"
  echo "Or use PHASE-*.md convention for phase completion docs"
fi

echo "‚úÖ Markdown check passed"

# Workflow template check (disabled for user projects)
# This project doesn't use the ai-coder-agents workflow system
echo ""
echo "üìã Workflow: User project mode (template checks disabled)"

# Check if CodeRabbit is installed
if command -v coderabbit &> /dev/null; then
  echo ""
  echo "üê∞ CodeRabbit: Reviewing staged changes..."

  # Run CodeRabbit on staged files
  coderabbit review --staged --format json > .coderabbit-review.json 2>&1 || {
    echo "‚ö†Ô∏è  CodeRabbit review encountered issues"
  }

  # Check for blockers
  if [ -f ".coderabbit-review.json" ]; then
    if grep -q '"severity": "blocker"' .coderabbit-review.json 2>/dev/null; then
      echo ""
      echo "‚ùå BLOCKER ISSUES FOUND"
      echo "============================================================"
      coderabbit review --staged --format pretty --filter blocker
      echo ""
      echo "Fix these issues before committing!"
      echo "Or run: git commit --no-verify (not recommended)"
      rm -f .coderabbit-review.json
      exit 1
    fi

    # Check for major issues
    if grep -q '"severity": "major"' .coderabbit-review.json 2>/dev/null; then
      echo ""
      echo "‚ö†Ô∏è  MAJOR ISSUES FOUND"
      echo "============================================================"
      coderabbit review --staged --format pretty --filter major
      echo ""
      echo -n "Continue with major issues? (y/N): "
      read -r response
      if [[ ! "$response" =~ ^[Yy]$ ]]; then
        rm -f .coderabbit-review.json
        exit 1
      fi
    fi

    rm -f .coderabbit-review.json
  fi

  echo "‚úÖ CodeRabbit review passed"
else
  echo "‚ö†Ô∏è  CodeRabbit CLI not installed - quality gates limited"
  echo "   Install: curl -fsSL https://cli.coderabbit.ai/install.sh | sh"
fi

# Run linter if available
if [ -f "package.json" ] && grep -q "\"lint\"" package.json; then
  echo ""
  echo "üìù Running linter..."
  npm run lint --silent || {
    echo ""
    echo "‚ùå Linting failed"
    echo "Fix issues or run: git commit --no-verify"
    exit 1
  }
  echo "‚úÖ Linting passed"
fi

echo ""
echo "============================================================"
echo "‚úÖ Pre-commit checks passed"
echo "============================================================"

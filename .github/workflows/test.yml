name: Test Suite

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch: # Allow manual trigger

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'

jobs:
  # ============================================================================
  # UNIT TESTS
  # ============================================================================
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test -- --run --reporter=verbose

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: unit-test-results
          path: test-results/
          retention-days: 7

  # ============================================================================
  # INTEGRATION TESTS
  # ============================================================================
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      # Test environment variables (use secrets in production)
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.TEST_SUPABASE_SERVICE_KEY }}
      UPSTASH_REDIS_REST_URL: ${{ secrets.TEST_UPSTASH_REDIS_URL }}
      UPSTASH_REDIS_REST_TOKEN: ${{ secrets.TEST_UPSTASH_REDIS_TOKEN }}
      UPSTASH_VECTOR_REST_URL: ${{ secrets.TEST_UPSTASH_VECTOR_URL }}
      UPSTASH_VECTOR_REST_TOKEN: ${{ secrets.TEST_UPSTASH_VECTOR_TOKEN }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run integration tests
        run: npm run test:integration -- --run --reporter=verbose

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results/
          retention-days: 7

  # ============================================================================
  # E2E TESTS - AUTHENTICATION (PRIORITY)
  # ============================================================================
  e2e-auth-tests:
    name: E2E Auth Tests (Critical)
    runs-on: ubuntu-latest
    timeout-minutes: 20

    env:
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.TEST_CLERK_SECRET_KEY }}
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps chromium

      - name: Build application
        run: npm run build

      - name: Run auth E2E tests
        run: npm run test:e2e:auth

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-auth-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # ============================================================================
  # E2E TESTS - FULL SUITE
  # ============================================================================
  e2e-full-tests:
    name: E2E Full Suite
    runs-on: ubuntu-latest
    needs: [e2e-auth-tests] # Only run if auth tests pass
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox]

    env:
      NEXT_PUBLIC_APP_URL: http://localhost:3000
      # Add all required test secrets
      NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY: ${{ secrets.TEST_CLERK_PUBLISHABLE_KEY }}
      CLERK_SECRET_KEY: ${{ secrets.TEST_CLERK_SECRET_KEY }}
      NEXT_PUBLIC_SUPABASE_URL: ${{ secrets.TEST_SUPABASE_URL }}
      NEXT_PUBLIC_SUPABASE_ANON_KEY: ${{ secrets.TEST_SUPABASE_ANON_KEY }}
      TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL }}
      TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-${{ matrix.browser }}-test-results
          path: |
            test-results/
            playwright-report/
          retention-days: 7

  # ============================================================================
  # TYPE CHECKING
  # ============================================================================
  type-check:
    name: TypeScript Type Check
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type check
        run: npm run type-check

  # ============================================================================
  # LINTING
  # ============================================================================
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

  # ============================================================================
  # SECURITY SCAN
  # ============================================================================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Scan for secrets
        run: |
          ! grep -r "sk_live_" . --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=.git
          ! grep -r "pk_live_" . --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=.git
          ! grep -r "AKIA" . --exclude-dir=node_modules --exclude-dir=.next --exclude-dir=.git

  # ============================================================================
  # TEST REPORT
  # ============================================================================
  test-report:
    name: Generate Test Report
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-auth-tests, e2e-full-tests]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Download all test results
        uses: actions/download-artifact@v4
        with:
          path: test-results/

      - name: Generate report
        run: npm run test:report
        continue-on-error: true

      - name: Upload report
        uses: actions/upload-artifact@v4
        with:
          name: test-report
          path: test-results/report.html
          retention-days: 30

  # ============================================================================
  # DEPLOYMENT CHECK
  # ============================================================================
  deployment-ready:
    name: Deployment Ready Check
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-auth-tests, e2e-full-tests, type-check, lint, security-scan]
    if: github.ref == 'refs/heads/main'
    timeout-minutes: 5

    steps:
      - name: Check deployment status
        run: |
          echo "âœ… All tests passed - deployment ready!"
          echo "Next steps:"
          echo "1. Review test results"
          echo "2. Deploy to staging"
          echo "3. Run smoke tests"
          echo "4. Deploy to production"

      - name: Notify deployment ready
        if: success()
        run: |
          echo "ðŸš€ Ready for deployment to production"
          # Add your notification logic here (Slack, Discord, etc.)
